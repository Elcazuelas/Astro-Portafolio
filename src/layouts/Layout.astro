---
import "../styles/global.css";
import Side from "../components/Side.astro";
import { ClientRouter } from "astro:transitions";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>CazuelasDev</title>
		<ClientRouter />
	</head>
	<body class="bg-linear-to-b bg-fixed from-slate-700 to-slate-950">
		<div
			class="sm:hidden fixed z-6 top-0 left-0 w-full h-auto bg-linear-to-t from-transparent to-slate-900"
		>
			<button
				id="aside-target"
				type="button"
				class="inline-flex items-center p-2 mt-2 ms-3 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
			>
				<span class="sr-only">Open sidebar</span>
				<svg
					class="w-6 h-6"
					aria-hidden="true"
					fill="currentColor"
					viewBox="0 0 20 20"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						clip-rule="evenodd"
						fill-rule="evenodd"
						d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"
					></path>
				</svg>
			</button>
		</div>
		<div class="h-screen flex ps-2">
			<aside
				id="aside"
				class="bg-linear-to-b from-slate-700 to-slate-950
			fixed top-0 left-0 lg:left-30 z-40 w-64 transition-all duration-200 h-screen sm:flex flex-col hidden"
			>
				<button
					id="close-aside"
					type="button"
					class="inline-flex items-center p-2 mt-2 ms-3 text-sm text-gray-500 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
				>
					<span class="sr-only">Open sidebar</span>
					<svg
						class="w-6 h-6"
						aria-hidden="true"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path
							clip-rule="evenodd"
							fill-rule="evenodd"
							d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"
						></path>
					</svg>
				</button>
				<Side />
			</aside>
			<main
				id="main"
				class="flex-1 pe-2 lg:ms-94 sm:ms-64 lg:me-30 sm:mt-25 mt-10 transition-all duration-200"
			>
				<div class="relative grid grid-cols-6 sm:grid-cols-12 gap-3">
					<div
						class="sm:col-span-10 sm:col-start-2 col-span-4 col-start-2 gap-20 flex flex-col"
					>
						<slot />
					</div>
				</div>
			</main>
		</div>
	</body>
</html>

<script>
	const asideTarget = document.querySelector(
		"#aside-target",
	) as HTMLButtonElement;
	const aside = document.querySelector("#aside") as HTMLElement;
	const main = document.querySelector("#main") as HTMLElement;
	const closeAside = document.querySelector(
		"#close-aside",
	) as HTMLButtonElement;

	// Función para alternar el estado del aside
	const toggleAside = () => {
		aside.classList.toggle("hidden");
		aside.classList.toggle("flex");
		main.classList.toggle("blur-sm");
	};

	// Al hacer clic en el botón de apertura del aside
	asideTarget.addEventListener("click", (event) => {
		event.stopPropagation(); // Evitar que el clic se propague al documento
		toggleAside();
	});

	// Al hacer clic en el botón de cierre del aside
	closeAside.addEventListener("click", (event) => {
		event.stopPropagation(); // Evitar que el clic se propague al documento
		toggleAside();
	});

	// Cerrar el aside si se hace clic fuera de él
	document.addEventListener("click", (event) => {
		// Verificar si el clic ocurrió fuera del aside y el botón de apertura
		if (!event.target) return;
		if (
			!aside.contains(event.target as Node) &&
			!asideTarget.contains(event.target as Node)
		) {
			// Si está abierto, cerrar el aside
			if (!aside.classList.contains("hidden")) {
				toggleAside();
			}
		}
	});

	aside?.addEventListener("click", (event) => {
		if(window.innerWidth > 640) return
		if ((event.target as HTMLElement).tagName.toLowerCase() === "a") {
			toggleAside();
		}
	});
</script>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		color: white;
		font-family: sans-serif;
		scroll-behavior: smooth;
	}
</style>
